import asyncio
import os
from service.generateFile import create_product_receipt
from datetime import datetime
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import Message, ChatActions, ReplyKeyboardMarkup, CallbackQuery, \
    InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton, ContentType
from buttons.users.main import main
from config import dp, db, bot, DELIVERY_CHAT
from buttons.admin.settings_catalog import check_markup, confirm_markup
# from hendlers.user.dostavka import dyl_start, projarkas, garnishs, sauces
from aiogram.utils.callback_data import CallbackData
from heandlers.users.dylevery import cmd_dyl
import json

b54 = KeyboardButton("üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä", request_contact=True)
send_phone = ReplyKeyboardMarkup(resize_keyboard=True).add(b54)

dostavka = "üéí –î–æ—Å—Ç–∞–≤–∫–∞"
samovyvoz = "üöó –°–∞–º–æ–≤—ã–≤–æ–∑"

product_cb_2 = CallbackData('product', 'id', 'action')


def product_markup_2(idx, count):
    global product_cb_2

    markup = InlineKeyboardMarkup()
    back_btn = InlineKeyboardButton('‚ûñ', callback_data=product_cb_2.new(id=idx, action='decrease'))
    count_btn = InlineKeyboardButton(count, callback_data=product_cb_2.new(id=idx, action='count'))
    next_btn = InlineKeyboardButton('‚ûïÔ∏è', callback_data=product_cb_2.new(id=idx, action='increase'))

    markup.row(back_btn, count_btn, next_btn)

    return markup


def device_():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    yes = "–î–∞"
    not_ = "–ù–µ—Ç"
    markup.add(yes, not_)
    return markup


def device_count():
    markup = ReplyKeyboardMarkup()
    for i in range(1, 6):
        i = str(i)
        markup.add(i)

    return markup


@dp.message_handler(text='üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –ö–æ—Ä–∑–∏–Ω—É')
async def process_cart(message: types.Message, state: FSMContext):
    cart_data = db.fetchall(
        'SELECT * FROM cart WHERE cid=?', (message.chat.id,))
    if len(cart_data) == 0:
        await message.answer('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.')
    else:
        await bot.send_chat_action(message.chat.id, ChatActions.TYPING)
        async with state.proxy() as data:
            data['products'] = {}
        order_cost = 0

        for _, idx, count_in_cart, comment, projarka, garnish, sauce, amount, spice in cart_data:
            product = db.fetchone('SELECT * FROM products WHERE idx=?', (idx,))
            if product is None:
                db.query('DELETE FROM cart WHERE idx=?', (idx,))
            else:
                _, title, body, image, price, _, _, _ = product

                markup = product_markup_2(idx, count_in_cart)
                text = f'<b>{title}</b>\n'
                info = ""

                if image:
                    await message.answer_photo(photo=image,
                                               caption=text,
                                               reply_markup=markup)
                else:
                    await message.answer(text=text, reply_markup=markup)

                order_cost += price
                async with state.proxy() as data:
                    if data['products'].get(idx):
                        idx += "2"

                    data['products'][idx] = [title, price, count_in_cart, info]

        if order_cost != 0:
            markup = ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
            markup.add('üì¶ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', "üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É").add('üëà –ù–∞–∑–∞–¥')

            await message.answer('–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä, —Ç–µ–ø–µ—Ä—å —ç—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ.\n'
                                 '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∏–ª–∏ –Ω–∞–∑–∞–¥',
                                 reply_markup=markup)


@dp.message_handler(text='üëà –ù–∞–∑–∞–¥')
async def back_menu(message: types.Message):
    await cmd_dyl(message)


@dp.callback_query_handler(product_cb_2.filter(action=['count', 'increase', 'decrease']))
async def product_callback_handler(query: CallbackQuery, callback_data: dict, state: FSMContext):
    idx = callback_data['id']
    action = callback_data['action']
    if 'count' == action:
        async with state.proxy() as data:
            if 'products' not in data.keys():
                await process_cart(query.message, state)
            else:
                await query.answer(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ - {data["products"][idx][2]}')
    else:
        async with state.proxy() as data:
            if 'products' not in data.keys():
                await process_cart(query.message, state)
            else:
                data['products'][idx][2] += 1 if 'increase' == action else -1
                count_in_cart = data['products'][idx][2]
                if count_in_cart <= 0:
                    db.query('''DELETE FROM cart
                    WHERE cid = ? AND idx = ?''', (query.message.chat.id, idx))
                    await query.message.delete()
                else:
                    db.query('''UPDATE cart
                        SET quantity = ?
                    WHERE cid = ? AND idx = ?''', (count_in_cart, query.message.chat.id, idx))
                    await query.message.edit_reply_markup(product_markup_2(idx, count_in_cart))


class CheckoutState(StatesGroup):
    check_cart = State()
    name = State()
    brand_auto = State()
    color_auto = State()
    number_auto = State()
    confirm = State()


@dp.message_handler(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É")
async def delete_cart(message: types.Message):
    db.query("""DELETE FROM cart WHERE cid=?""", (message.chat.id,))
    await message.answer("–ì–æ—Ç–æ–≤–æ", reply_markup=main())


@dp.message_handler(text='üì¶ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑')
async def process_checkout(message: Message, state: FSMContext):
    async with state.proxy() as data:
        total_price = 0
        for title, price, count_in_cart, info in data['products'].values():
            tp = count_in_cart * price
            total_price += tp

        await CheckoutState.check_cart.set()
        await checkout(message, state)


async def checkout(message, state):
    global MESSAGE
    answer = ''
    total_price = 0
    discount_applied = False

    async with state.proxy() as data:
        for title, price, count_in_cart, info in data['products'].values():
            if count_in_cart > 0:
                tp = count_in_cart * price
                answer += f'<b>{title}</b> * {count_in_cart}–∫–≥/—à—Ç. = {tp}‚ÇΩ\n'
                total_price += tp

        if total_price > 5000:
            discount = total_price * 0.02  # –°–∫–∏–¥–∫–∞ 2%
            total_price -= discount
            discount_applied = True

    if discount_applied:
        await message.answer(f'{answer}\n–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total_price}‚ÇΩ (–°–∫–∏–¥–∫–∞ 2% –ø—Ä–∏–º–µ–Ω–µ–Ω–∞).',
                             reply_markup=check_markup())
    else:
        await message.answer(f'{answer}\n–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total_price}‚ÇΩ.',
                             reply_markup=check_markup())


@dp.pre_checkout_query_handler()
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    print('order_info')
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@dp.message_handler(lambda message: message.text not in ['‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ', 'üëà –ù–∞–∑–∞–¥'],
                    state=CheckoutState.check_cart)
async def process_check_cart_invalid(message: Message):
    await message.reply('–¢–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ –±—ã–ª–æ.')


@dp.message_handler(text='üëà –ù–∞–∑–∞–¥', state=CheckoutState.check_cart)
async def process_check_cart_back(message: types.Message, state: FSMContext):
    await state.finish()
    await process_cart(message, state)


@dp.message_handler(text='üëà –ù–∞–∑–∞–¥', state=CheckoutState.name)
async def process_name_back(message: Message, state: FSMContext):
    await CheckoutState.check_cart.set()
    await checkout(message, state)


@dp.message_handler(text='‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ', state=CheckoutState.check_cart)
async def dylevery(message: types.Message, state: FSMContext):
    await CheckoutState.name.set()
    await message.answer('–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–µ –∏–º—è.', reply_markup=types.ReplyKeyboardRemove())


@dp.message_handler(state=CheckoutState.name)
async def process_name(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text

        await CheckoutState.brand_auto.set()
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –º–∞—Ä–∫—É –º–∞—à–∏–Ω—ã")

        # await CheckoutState.next()


@dp.message_handler(state=CheckoutState.brand_auto)
async def process_brand(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['brand_auto'] = message.text

        await CheckoutState.color_auto.set()
        await message.answer("–£–∫–∞–∂–∏—Ç–µ —Ü–≤–µ—Ç –º–∞—à–∏–Ω—ã")
        # await CheckoutState.next()


@dp.message_handler(state=CheckoutState.color_auto)
async def process_color_auto(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['color_auto'] = message.text

        await CheckoutState.number_auto.set()
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Å. –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
        # await CheckoutState.next()


@dp.message_handler(state=CheckoutState.number_auto)
async def process_auto_number(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['number_auto'] = message.text

    await CheckoutState.confirm.set()
    await confirm(message, state)
    # await CheckoutState.next()


async def confirm(message, state):
    async with state.proxy() as data:
        total_price = 0
        an = ''
        discount_applied = False

        for title, price, count_in_cart, info in data['products'].values():
            if count_in_cart > 0:
                tp = count_in_cart * price
                an += f'<b>{title}</b> - {count_in_cart}–∫–≥/—à—Ç\n{info}\n\n'
                total_price += tp

        if total_price > 5000:
            discount = total_price * 0.02  # –°–∫–∏–¥–∫–∞ 2%
            total_price -= discount
            discount_applied = True

        text = f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑.\n\n" \
               f"<b>–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞</b>\n" \
               f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {data['name']}\n" \
               f"–¶–≤–µ—Ç –º–∞—à–∏–Ω—ã: {data['color_auto']}\n" \
               f"–ú–∞—Ä–∫–∞ –º–∞—à–∏–Ω—ã: {data['brand_auto']}\n" \
               f"–ù–æ–º–µ—Ä –º–∞—à–∏–Ω—ã: {data['number_auto']}\n" \

        if discount_applied:
            text += f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_price} —Ä—É–±–ª–µ–π (–°–∫–∏–¥–∫–∞ 2% –ø—Ä–∏–º–µ–Ω–µ–Ω–∞)\n\n" \
                    f"–í–∞—à –∑–∞–∫–∞–∑:\n{an}"
        else:
            text += f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_price} —Ä—É–±–ª–µ–π\n\n" \
                    f"–í–∞—à –∑–∞–∫–∞–∑:\n{an}"

        await message.answer(text, reply_markup=confirm_markup())


@dp.message_handler(lambda message: message.text not in ['‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑', 'üëà –ù–∞–∑–∞–¥'],
                    state=CheckoutState.confirm)
async def process_confirm_invalid(message: Message):
    await message.reply('–¢–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ –±—ã–ª–æ.')


@dp.message_handler(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑', state=CheckoutState.confirm)
async def process_confirm(message: Message, state: FSMContext):
    async with state.proxy() as data:
        await message.answer("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω\n\n"
                             "–ù–∏–∂–µ –ø—Ä–∏–ª–æ–∂–µ–Ω —á–µ–∫")

        doc = await create_product_receipt(state, message.from_user.id)

        doc_path = open(doc, 'rb+')
        await bot.send_message(-4177653235, text=f"–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞\n\n"
                                                 f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {data['name']}\n"
                                                 f"–¶–≤–µ—Ç –º–∞—à–∏–Ω—ã: {data['color_auto']}\n"
                                                 f"–ú–∞—Ä–∫–∞ –º–∞—à–∏–Ω—ã: {data['brand_auto']}\n"
                                                 f"–ù–æ–º–µ—Ä –º–∞—à–∏–Ω—ã: {data['number_auto']}\n")
        await bot.send_document(-4177653235, document=doc_path)

        db.query('DELETE FROM CART WHERE cid=?', (message.from_user.id,))
        os.remove(doc)
        await state.finish()
