from config import dp, db, bot, SUPPORT_CHAT
from aiogram import types
from buttons.users.sos import sos
from context.context import SosState
from aiogram.dispatcher import FSMContext
from buttons.users.reserved import phone_number
from buttons.users.main import main
from buttons.users.reserved import done_or_cancel
from aiogram.types import ContentType


@dp.message_handler(text='? –ü–æ–º–æ—â—å')
async def sos_cmd(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±", reply_markup=sos())


@dp.message_handler(text="üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å")
async def command_phone(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
                         "—Ç—É—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")


@dp.message_handler(text="‚úâ –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
async def write_sms(message: types.Message):
    await SosState.question.set()
    await message.answer('–í —á–µ–º —Å—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã? –û–ø–∏—à–∏—Ç–µ –∫–∞–∫ –º–æ–∂–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–µ–µ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç.',
                         reply_markup=sos())


@dp.message_handler(state=SosState.question)
async def process_qua(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.text != 'üëà –ù–∞–∑–∞–¥':
            data['question'] = message.text
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.", reply_markup=phone_number())
            await SosState.next()
        else:
            await message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ!', reply_markup=main())
            await state.finish()


@dp.message_handler(state=SosState.phone_number)
async def process_phn(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['phone_number'] = message.text
        await SosState.next()
        await message.answer('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –≤–µ—Ä–Ω–æ.', reply_markup=done_or_cancel())


@dp.message_handler(content_types=ContentType.CONTACT, state=SosState.phone_number)
async def process_cnt(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['phone_number'] = message.contact['phone_number']
        await SosState.next()
        await message.answer('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –≤–µ—Ä–Ω–æ.', reply_markup=done_or_cancel())


@dp.message_handler(lambda message: message.text not in ["‚úÖ –í–µ—Ä–Ω–æ", "‚ùå –ù–µ—Ç"], state=SosState.submit)
async def process_invalid(message: types.Message):
    await message.answer('–¢–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ –±—ã–ª–æ.')


@dp.message_handler(text="‚ùå –ù–µ—Ç", state=SosState.submit)
async def process_not(message: types.Message, state: FSMContext):
    await message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ!', reply_markup=main())
    await state.finish()


@dp.message_handler(text="‚úÖ –í–µ—Ä–Ω–æ", state=SosState.submit)
async def process_done(message: types.Message, state: FSMContext):
    cid = message.chat.id
    async with state.proxy() as data:
        db.query('INSERT INTO questions VALUES (?, ?)',
                 (cid, data['question']))
        await message.answer('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', reply_markup=main())
        await bot.send_message(SUPPORT_CHAT, "SOS\n"
                                             "\n"
                                             f"–í–æ–ø—Ä–æ—Å: {data['question']}\n"
                                             f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: {data['phone_number']}")

    await state.finish()
